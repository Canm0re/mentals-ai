# root
## use: evaluate

Example: "
Input: 2 8 8 14
Possible next steps:
1. 2 + 8 = 10 (left: 8 10 14)
2. 8 / 2 = 4 (left: 4 8 14)
3. 14 + 2 = 16 (left: 8 8 16)
4. 2 * 8 = 16 (left: 8 14 16)
5. 8 - 2 = 6 (left: 6 8 14)
6. 14 - 8 = 6 (left: 2 6 8)
7. 14 /  2 = 7 (left: 7 8 8)
8. 14 - 2 = 12 (left: 8 8 12)

"

Input: 4 5 8 2
Generate 8 possible next steps.

Then call evaluate with each possible step.
For each sure result, call evaluate with new possible step again until the final decision is made.

Output final expression with all input numbers.

# evaluate
## keep_context: false

Evaluate if given numbers can reach 24 (sure/likely/impossible)

Example: "
10 14
10 + 14 = 24
sure
11 12
11 + 12 = 23
12 - 11 = 1
11 * 12 = 132
11 / 12 = 0.91
impossible
4 4 10
4 + 4 + 10 = 8 + 10 = 18
4 * 10 - 4 = 40 - 4 = 36
(10 - 4) * 4 = 6 * 4 = 24
sure
4 9 11
9 + 11 + 4 = 20 + 4 = 24
sure
5 7 8
5 + 7 + 8 = 12 + 8 = 20
(8 - 5) * 7 = 3 * 7 = 21
I cannot obtain 24 now, but numbers are within a reasonable range
likely
5 6 6
5 + 6 + 6 = 17
(6 - 5) * 6 = 1 * 6 = 6
I cannot obtain 24 now, but numbers are within a reasonable range
likely
10 10 11
10 + 10 + 11 = 31
(11 - 10) * 10 = 10
10 10 10 are all too big
impossible
1 3 3
1 * 3 * 3 = 9
(1 + 3) * 3 = 12
1 3 3 are all too small
impossible
"
